services:
  fluentbit:
    image: fluent/fluent-bit
    container_name: hexatek-fluentbit-otel
    volumes:
      - ./config/fluent-bit:/fluent-bit/etc
    ports:
      - 5140:5140/udp # SYSLOG
      - 14318:4318    # OpenTelemetry
    depends_on:
      - opensearch-node1
      - opensearch-node2
    networks:
      - hexatek # All of the containers will join the same Docker bridge network

  opensearch-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
    image: opensearchproject/opensearch:latest # Specifying the latest available image - modify if you want a specific version
    container_name: hexatek-opensearch-node1
    environment:
      - cluster.name=hexatek-opensearch-cluster # Name the cluster
      - node.name=hexatek-opensearch-node1 # Name the node that will run in this container
      - discovery.seed_hosts=hexatek-opensearch-node1,hexatek-opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=hexatek-opensearch-node1,hexatek-opensearch-node2 # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    networks:
      - hexatek # All of the containers will join the same Docker bridge network

  opensearch-node2:
    image: opensearchproject/opensearch:latest # This should be the same image used for opensearch-node1 to avoid issues
    container_name: hexatek-opensearch-node2
    environment:
      - cluster.name=hexatek-opensearch-cluster
      - node.name=hexatek-opensearch-node2
      - discovery.seed_hosts=hexatek-opensearch-node1,hexatek-opensearch-node2
      - cluster.initial_cluster_manager_nodes=hexatek-opensearch-node1,hexatek-opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    networks:
      - hexatek

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: hexatek-opensearch-dashboards
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    depends_on:
      - opensearch-node1
      - opensearch-node2      
    environment:
      OPENSEARCH_HOSTS: '["http://hexatek-opensearch-node1:9200","http://hexatek-opensearch-node2:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: 'true' # disables security dashboards plugin in OpenSearch Dashboards
    networks:
      - hexatek

volumes:
  opensearch-data1:
  opensearch-data2:

networks:
  hexatek:
    name: 02-prometheus-mimir_default
    external: true
